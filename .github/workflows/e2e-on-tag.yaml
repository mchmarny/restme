name: E2E Test

on:  
  push:
    tags:
      - 'v*'
  
jobs:

  e2e-test:
    runs-on: ubuntu-latest
    env:
      # GOPATH: ${{ github.workspace }}
      GO111MODULE: "on"
      KO_DOCKER_REPO: kind.local
    steps:

    - name: Setup
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16

    - name: Checkout
      uses: actions/checkout@v2

    - name: Tidy
      run: |
        make tidy

    - name: Lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.38
        args: --config .golangci.yaml --timeout 3m

    - name: Test
      run: |
        make test

    - name: Variables
      run: |
        echo "RELEASE_VERSION=$(make version)" >> $GITHUB_ENV
        
    - name: Dependency
      run: |
        GO111MODULE=on go get github.com/google/ko/cmd/ko@master

        wget http://stedolan.github.io/jq/download/linux64/jq
        chmod +x ./jq
        sudo cp jq /usr/bin

    - name: Cluster
      uses: engineerd/setup-kind@v0.5.0
      with:
        version: v0.10.0
        wait: "600s"
        config: configs/ci-cluster.yaml

    - name: Status
      run: |
        kubectl cluster-info
        echo "current-context:" $(kubectl config current-context)
        kubectl get pods -n kube-system
        sleep 5
        for pod in $(kubectl get pods --no-headers -n kube-system -o custom-columns=":metadata.name"); do \
          kubectl wait --for=condition=Ready pod/$pod --timeout=300s -n kube-system; done

    - name: Deploy
      run: |
        echo "current-context:" $(kubectl config current-context)
        GOFLAGS="-ldflags=-X=main.version=${{ env.RELEASE_VERSION }}" \
          ko resolve -f deployments/ci-template.yaml | kubectl apply -f -

    - name: Verify
      run: | 
        kubectl rollout status deployment/restme
        kubectl get pods -l app=restme
        kubectl get services -l app=restme
        kubectl logs -l app=restme
        kubectl get nodes -o wide

    - name: Invoke
      run: | 
        set -e

        NODE_IP=( $(kubectl get nodes \
          -l kubernetes.io/hostname!=kind-control-plane \
          -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}') )
        
        curl -i -H "Content-Type: application/json" \
          http://${NODE_IP[0]}:30080/v1/request

        curl -i -H "Content-Type: application/json" \
          http://${NODE_IP[0]}:30080/v1/resource

        curl -i -H "Content-Type: application/json" \
          http://${NODE_IP[0]}:30080/v1/load/5s

        VERSION=$(curl -H "Content-Type: application/json" \
          http://${NODE_IP[0]}:30080/v1/request | jq ".request.version")
        
        if [ "$VERSION" != "${{ env.RELEASE_VERSION }}" ]; then
          echo "invalid version, expected: ${{ env.RELEASE_VERSION }}, got: ${VERSION}"
          exit 1;
        fi

    - name: Publish 
      run: |
        KO_DOCKER_REPO=ghcr.io/$GITHUB_REPOSITORY \
        GOFLAGS="-ldflags=-X=main.version=${{ env.RELEASE_VERSION }}" \
          ko publish ./cmd/ --bare --tags ${{ env.RELEASE_VERSION }},latest