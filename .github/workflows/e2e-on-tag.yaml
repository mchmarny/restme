name: E2E Test

on:  
  push:
    tags:
      - 'v*'
  
jobs:

  e2e-test:
    runs-on: ubuntu-latest
    steps:

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16

    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Tidy Modules
      run: |
        make tidy

    - name: Config Lint
      id: golangci_config
      uses: andstor/file-existence-action@v1
      with:
        files: .golangci.yaml

    - name: Lint Code
      if: steps.golangci_config.outputs.files_exists == 'true'
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.38
        args: --timeout 3m

    - name: Test Code
      run: |
        make test

    - name: Capture Version
      run: |
        echo "RELEASE_VERSION=$(make version)" >> $GITHUB_ENV
        
    - name: Install Ko
      uses: imjasonh/setup-ko@v0.4

    - name: Install jq
      run: |
        wget http://stedolan.github.io/jq/download/linux64/jq
        chmod +x ./jq
        sudo cp jq /usr/bin

    - name: Setup Cluster
      uses: engineerd/setup-kind@v0.5.0
      with:
        version: v0.10.0
        wait: "600s"
        config: configs/ci-cluster.yaml

    - name: Check Cluster
      run: |
        kubectl cluster-info
        echo "current-context:" $(kubectl config current-context)
        kubectl get pods -n kube-system
        sleep 5
        for pod in $(kubectl get pods --no-headers -n kube-system -o custom-columns=":metadata.name"); do \
          kubectl wait --for=condition=Ready pod/$pod --timeout=300s -n kube-system; done

    - name: Deploy Service
      run: |
        echo "current-context:" $(kubectl config current-context)
        KO_DOCKER_REPO=kind.local \
          GOFLAGS="-ldflags=-X=main.version=${{ env.RELEASE_VERSION }}" \
          ko resolve -f deployments/ci-template.yaml | kubectl apply -f -

    - name: Verify Deployment
      run: | 
        kubectl rollout status deployment/restme
        kubectl get pods -l app=restme
        kubectl get services -l app=restme
        kubectl logs -l app=restme
        kubectl get nodes -o wide

    - name: Test Integration
      run: | 
        test/endpoints "http://${NODE_IP[0]}:30080"
        test/version "http://${NODE_IP[0]}:30080" "${{ env.RELEASE_VERSION }}"

    - name: Publish Image
      run: |
        KO_DOCKER_REPO=ghcr.io/$GITHUB_REPOSITORY \
        GOFLAGS="-ldflags=-X=main.version=${{ env.RELEASE_VERSION }}" \
          ko publish ./cmd/ --bare --tags ${{ env.RELEASE_VERSION }},latest
